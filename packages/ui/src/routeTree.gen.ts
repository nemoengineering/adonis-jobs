/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as SchedulesRouteImport } from './routes/schedules'
import { Route as QueuesRouteImport } from './routes/queues'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RunsIndexRouteImport } from './routes/runs/index'
import { Route as OverviewIndexRouteImport } from './routes/overview/index'
import { Route as RunsJobIdRouteImport } from './routes/runs/$jobId'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const SchedulesRoute = SchedulesRouteImport.update({
  id: '/schedules',
  path: '/schedules',
  getParentRoute: () => rootRouteImport,
} as any)
const QueuesRoute = QueuesRouteImport.update({
  id: '/queues',
  path: '/queues',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RunsIndexRoute = RunsIndexRouteImport.update({
  id: '/runs/',
  path: '/runs/',
  getParentRoute: () => rootRouteImport,
} as any)
const OverviewIndexRoute = OverviewIndexRouteImport.update({
  id: '/overview/',
  path: '/overview/',
  getParentRoute: () => rootRouteImport,
} as any)
const RunsJobIdRoute = RunsJobIdRouteImport.update({
  id: '/runs/$jobId',
  path: '/runs/$jobId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/queues': typeof QueuesRoute
  '/schedules': typeof SchedulesRoute
  '/test': typeof TestRoute
  '/runs/$jobId': typeof RunsJobIdRoute
  '/overview': typeof OverviewIndexRoute
  '/runs': typeof RunsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/queues': typeof QueuesRoute
  '/schedules': typeof SchedulesRoute
  '/test': typeof TestRoute
  '/runs/$jobId': typeof RunsJobIdRoute
  '/overview': typeof OverviewIndexRoute
  '/runs': typeof RunsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/queues': typeof QueuesRoute
  '/schedules': typeof SchedulesRoute
  '/test': typeof TestRoute
  '/runs/$jobId': typeof RunsJobIdRoute
  '/overview/': typeof OverviewIndexRoute
  '/runs/': typeof RunsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/queues'
    | '/schedules'
    | '/test'
    | '/runs/$jobId'
    | '/overview'
    | '/runs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/queues'
    | '/schedules'
    | '/test'
    | '/runs/$jobId'
    | '/overview'
    | '/runs'
  id:
    | '__root__'
    | '/'
    | '/queues'
    | '/schedules'
    | '/test'
    | '/runs/$jobId'
    | '/overview/'
    | '/runs/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  QueuesRoute: typeof QueuesRoute
  SchedulesRoute: typeof SchedulesRoute
  TestRoute: typeof TestRoute
  RunsJobIdRoute: typeof RunsJobIdRoute
  OverviewIndexRoute: typeof OverviewIndexRoute
  RunsIndexRoute: typeof RunsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/schedules': {
      id: '/schedules'
      path: '/schedules'
      fullPath: '/schedules'
      preLoaderRoute: typeof SchedulesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/queues': {
      id: '/queues'
      path: '/queues'
      fullPath: '/queues'
      preLoaderRoute: typeof QueuesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/runs/': {
      id: '/runs/'
      path: '/runs'
      fullPath: '/runs'
      preLoaderRoute: typeof RunsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/overview/': {
      id: '/overview/'
      path: '/overview'
      fullPath: '/overview'
      preLoaderRoute: typeof OverviewIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/runs/$jobId': {
      id: '/runs/$jobId'
      path: '/runs/$jobId'
      fullPath: '/runs/$jobId'
      preLoaderRoute: typeof RunsJobIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  QueuesRoute: QueuesRoute,
  SchedulesRoute: SchedulesRoute,
  TestRoute: TestRoute,
  RunsJobIdRoute: RunsJobIdRoute,
  OverviewIndexRoute: OverviewIndexRoute,
  RunsIndexRoute: RunsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
